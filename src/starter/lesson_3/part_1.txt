functMap = {
  0x20: "add",
  0x21: "addu",
  0x22: "sub",
  0x23: "subu",
  0x24: "and",
  0x25: "or",
  0x27: "nor",
  0x26: "xor",
  0x0: "sll",
  0x2: "srl",
  0x3: "sra",
  0x8: "jr",
};

opcodeMap = {
  0x8: "addi",
  0x9: "addiu",
  0xc: "andi",
  0xd: "ori",
  0xe: "xori",
  0x24: "lbu",
  0x25: "lhu",
  0x23: "lw",
  0xf: "lui",
  0x28: "sb",
  0x29: "sh",
  0x2b: "sw",
  0x4: "beq",
};

nameToRegisterMap = {
  "$zero" : 0x0,
  "$at" : 0x1,
  "$v0" : 0x2,
  "$v1" : 0x3,
  "$a0" : 0x4,
  "$a1" : 0x5,
  "$a2" : 0x6,
  "$a3" : 0x7,
  "$t0" : 0x8,
  "$t1" : 0x9,
  "$t2" : 0xa,
  "$t3" : 0xb,
  "$t4" : 0xc,
  "$t5" : 0xd,
  "$t6" : 0xe,
  "$t7" : 0xf,
  "$s0" : 0x10,
  "$s1" : 0x11,
  "$s2" : 0x12,
  "$s3" : 0x13,
  "$s4" : 0x14,
  "$s5" : 0x15,
  "$s6" : 0x16,
  "$s7" : 0x17,
  "$t8" : 0x18,
  "$t9" : 0x19,
  "$k0" : 0x1a,
  "$k1" : 0x1b,
  "$gp" : 0x1c,
  "$sp" : 0x1d,
  "$fp" : 0x1e,
  "$ra" : 0x1f,
  "$pc" : 0x20
}

function ToUint32(x) {
  return parseInt(x) % Math.pow(2, 32);
}

function execute(instruction, registers) {
  var opcode = parseInt(instruction.substr(0,6),2);

  var rs, rt, rd;
  var op_str;

  // All R (register) instructions start with 0s
  if (opcode == 0x0) {
    // TODO: Fill out this area
  }

  // J instructions
  // TODO: Figure out the opcode check for J instructions
  else if (true) {
    // J format: oooooott ttttttt tttttttt tttttttt
    // TODO: Fill out this area
  }

  // TODO: Figure out the opcode check for I instructions
  else {
    // I format: ooooooss sssttttt iiiiiiii iiiiiiii
    // TODO: Fill out this area
  }
}

function run() {
  var binary = fetch();
  var instruction = decode(binary);
  var result = execute(instruction);
  write(result);
}
