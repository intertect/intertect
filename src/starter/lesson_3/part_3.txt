function ToUint32(x) {
  return x >>> 0;
}

function fetch(registers, memory) {
  var fetchLocation = registers.read(nameToRegisterMap["$pc"]);

  var byte_1 = memory.read(fetchLocation);
  var byte_2 = memory.read(fetchLocation + 1);
  var byte_3 = memory.read(fetchLocation + 2);
  var byte_4 = memory.read(fetchLocation + 3);

  var binary = byte_4;
  binary |= byte_3 << 8;
  binary |= byte_2 << 16;
  binary |= byte_1 << 24;

  return binary;
}

function decode(binary) {
  var opcode = binary >> 26;

  // All R (register) binarys start with 0s
  var rs, rt, rd;
  var op_str;

  var pc, pc_val, result;
  var instruction;

  if (opcode == 0x0) {
    // TODO: Fill this area
    rs = binary >> 21 & 0x1f
    rt = binary >> 16 & 0x1f
    rd = binary >> 11 & 0x1f
    var shamt = binary >> 6 & 0x1f
    var funct = binary & 0x3f

    op_str = functMap[funct];
    instruction = [op_str, rs, rt, rd, shamt];
  }

  else if (opcode == 0x2 || opcode == 0x3) {
    // J format: oooooott ttttttt tttttttt tttttttt
    var target = (binary & 0x3FFFFFF) << 2;

    op_str = opcode == 0x2 ? "j" : "jal";
    instruction = [op_str, target];
  }

  else {
    // I format: ooooooss sssttttt iiiiiiii iiiiiiii
    rs = (binary >> 21) & 0x1F;
    rt = (binary >> 16) & 0x1F;
    var imm = (binary >> 0) & 0xFFFF;

    op_str = opcodeMap[opcode];
    instruction = [op_str, rs, rt, imm];
  }

  return instruction;
}

function execute(instruction, registers, memory) {
  var op_str;
  var rd, rs, rt;
  var shamt;
  var result;
  var imm;
  var target;
  var offset;
  var pc, pc_val, ra;
  var byte_1, byte_2, byte_3, byte_4;
  var bytes;
  var value;
  var start_address;

  // TODO: Extract data from instruction array

  // TODO: Fill this with your past work
  switch(op_str) {
  }
}

// this is just a mock of the behind the scenes: altering this function will NOT
// change the outcome of running your code
function processMIPS(registers, memory) {
  var binary = fetch(registers, memory);
  var instruction = decode(binary);
  var [writeLocation, position, result] = execute(instruction, registers, memory);

  /* ------------------------------------------------------------------------ */
  // We've already implemented the functions below this line for you! You'll be
  // doing these in the following lessons
  /* ------------------------------------------------------------------------ */
  write(writeLocation, position, result);
}

var functMap = {
  0x20: "add",
  0x21: "addu",
  0x22: "sub",
  0x23: "subu",
  0x24: "and",
  0x25: "or",
  0x27: "nor",
  0x26: "xor",
  0x00: "sll",
  0x02: "srl",
  0x03: "sra",
  0x08: "jr",
};

var opcodeMap = {
  0x08: "addi",
  0x09: "addiu",
  0x0c: "andi",
  0x0d: "ori",
  0x0e: "xori",
  0x24: "lbu",
  0x25: "lhu",
  0x23: "lw",
  0x0f: "lui",
  0x28: "sb",
  0x29: "sh",
  0x2b: "sw",
  0x04: "beq",
};

var nameToRegisterMap = {
  "$zero" : 0x0,
  "$at" : 0x1,
  "$v0" : 0x2,
  "$v1" : 0x3,
  "$a0" : 0x4,
  "$a1" : 0x5,
  "$a2" : 0x6,
  "$a3" : 0x7,
  "$t0" : 0x8,
  "$t1" : 0x9,
  "$t2" : 0xa,
  "$t3" : 0xb,
  "$t4" : 0xc,
  "$t5" : 0xd,
  "$t6" : 0xe,
  "$t7" : 0xf,
  "$s0" : 0x10,
  "$s1" : 0x11,
  "$s2" : 0x12,
  "$s3" : 0x13,
  "$s4" : 0x14,
  "$s5" : 0x15,
  "$s6" : 0x16,
  "$s7" : 0x17,
  "$t8" : 0x18,
  "$t9" : 0x19,
  "$k0" : 0x1a,
  "$k1" : 0x1b,
  "$gp" : 0x1c,
  "$sp" : 0x1d,
  "$fp" : 0x1e,
  "$ra" : 0x1f,
  "$pc" : 0x20
};
